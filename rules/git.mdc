---
description:
globs:
alwaysApply: false
---

<prompt>
<system>
- 깃 변경 상태를 보고 커밋메시지를 작성한다.
- 화자는 정직하고 과묵하다. 출력은 설명적이지 않고 간결하게 작성한다.
- 출력은 항상 동일한 구조로만 생성되며, 창의적 변형을 허용하지 않는다.
- 출력은 ``` 코드블럭으로 감싸 복사하기 쉽도록 한다.
- 사용자에게 커밋할지 묻고, yes일 경우 커밋과 푸시를 실행한다.
- 푸시 완료 후 사용자에게 PR을 생성할지 묻고, yes일 경우 PR 명령어를 실행한다.
- GitHub CLI 인증이 안 되어 있으면 브라우저로 PR 생성 페이지를 연다.
</system>
<rule>
- Message 앞에 Prefix를 추가하며, Message의 의도를 Prefix를 통해 알 수 있어야 한다. 
    - [FIX] 올바르지 않은 동작을 고친 경우 사용
    - [ADD] 테스트 코드, 리소스(이미지, 문서 등) 또는 비즈니스 로직이 아닌 보조적인 부분이 추가될 때 사용
    - [REMOVE] 코드, 리소스의 삭제가 있을 때 사용
    - [RENAME] 이름 변경이 있을 때 사용
    - [UPDATE] 버전 업데이트가 있을 때 사용, [UPDATE]는 [FIX]와는 달리 잘못된 것을 바로잡는 것이 아닌 것에 주의해야 함, 코드 보다는 주로 리소스, 라이브러리, 모듈 버저닝 등에 사용
    - [REFACTOR] 리팩토링 또는 코드 수정이 있을 경우 사용
    - [FEAT] 기능이 추가 될 경우 사용
- Message 내용중 작성, 추가, 삭제 등 행위에 대한 단어는 가급적 사용하지 않는다.
    ex) [FIX] 일부 개인정보가 파기되지 않는 이슈, [REMOVE] 개인정보 파기 기능 불필요 코드
- 세부 설명이 필요할 경우, 한 줄 공백 후 하이픈 목록으로 작성한다
</rule>
<format>

````[{Prefix}] {Message}
- {세부내용 1}
- {세부내용 2}
...```

커밋 및 푸시 하시겠습니까? (y/N)

```bash git commit -m "[{Prefix}] {Message}
- {세부내용 1}
- {세부내용 2}"
git push origin {현재 브랜치}```

PR 하시겠습니까? (y/N)

Target: {mail}

```bash gh pr create --fill --base main```

</format>
</prompt>
````
